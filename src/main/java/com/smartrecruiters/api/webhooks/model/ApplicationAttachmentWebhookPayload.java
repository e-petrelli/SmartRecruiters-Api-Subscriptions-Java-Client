/*
 * Webhooks
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 201907.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartrecruiters.api.webhooks.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.smartrecruiters.api.webhooks.model.ApplicationAttachmentWebhookPayloadAllOf;
import com.smartrecruiters.api.webhooks.model.ApplicationWebhookPayload;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ApplicationAttachmentWebhookPayload
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2019-11-07T12:35:47.135042Z[Europe/London]")
public class ApplicationAttachmentWebhookPayload {
  public static final String SERIALIZED_NAME_JOB_ID = "job_id";
  @SerializedName(SERIALIZED_NAME_JOB_ID)
  private String jobId;

  public static final String SERIALIZED_NAME_CANDIDATE_ID = "candidate_id";
  @SerializedName(SERIALIZED_NAME_CANDIDATE_ID)
  private String candidateId;

  public static final String SERIALIZED_NAME_ATTACHMENT_ID = "attachment_id";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_ID)
  private String attachmentId;


  public ApplicationAttachmentWebhookPayload jobId(String jobId) {
    
    this.jobId = jobId;
    return this;
  }

   /**
   * Get jobId
   * @return jobId
  **/
  @ApiModelProperty(required = true, value = "")

  public String getJobId() {
    return jobId;
  }



  public void setJobId(String jobId) {
    this.jobId = jobId;
  }


  public ApplicationAttachmentWebhookPayload candidateId(String candidateId) {
    
    this.candidateId = candidateId;
    return this;
  }

   /**
   * Get candidateId
   * @return candidateId
  **/
  @ApiModelProperty(required = true, value = "")

  public String getCandidateId() {
    return candidateId;
  }



  public void setCandidateId(String candidateId) {
    this.candidateId = candidateId;
  }


  public ApplicationAttachmentWebhookPayload attachmentId(String attachmentId) {
    
    this.attachmentId = attachmentId;
    return this;
  }

   /**
   * Get attachmentId
   * @return attachmentId
  **/
  @ApiModelProperty(required = true, value = "")

  public String getAttachmentId() {
    return attachmentId;
  }



  public void setAttachmentId(String attachmentId) {
    this.attachmentId = attachmentId;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationAttachmentWebhookPayload applicationAttachmentWebhookPayload = (ApplicationAttachmentWebhookPayload) o;
    return Objects.equals(this.jobId, applicationAttachmentWebhookPayload.jobId) &&
        Objects.equals(this.candidateId, applicationAttachmentWebhookPayload.candidateId) &&
        Objects.equals(this.attachmentId, applicationAttachmentWebhookPayload.attachmentId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(jobId, candidateId, attachmentId);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationAttachmentWebhookPayload {\n");
    sb.append("    jobId: ").append(toIndentedString(jobId)).append("\n");
    sb.append("    candidateId: ").append(toIndentedString(candidateId)).append("\n");
    sb.append("    attachmentId: ").append(toIndentedString(attachmentId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

