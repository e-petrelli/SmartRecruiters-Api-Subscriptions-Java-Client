/*
 * Webhooks
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 201907.10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.smartrecruiters.api.webhooks;

import com.smartrecruiters.api.webhooks.invoker.ApiCallback;
import com.smartrecruiters.api.webhooks.invoker.ApiClient;
import com.smartrecruiters.api.webhooks.invoker.ApiException;
import com.smartrecruiters.api.webhooks.invoker.ApiResponse;
import com.smartrecruiters.api.webhooks.invoker.Configuration;
import com.smartrecruiters.api.webhooks.invoker.Pair;
import com.smartrecruiters.api.webhooks.invoker.ProgressRequestBody;
import com.smartrecruiters.api.webhooks.invoker.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.smartrecruiters.api.webhooks.model.ErrorResponse;
import com.smartrecruiters.api.webhooks.model.Subscription;
import com.smartrecruiters.api.webhooks.model.SubscriptionRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SubscriptionsApi {
    private ApiClient localVarApiClient;

    public SubscriptionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SubscriptionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for subscriptionsActivate
     * @param id subscription identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Subscription activated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Subscription already activated. </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> Webhook activation handshake failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsActivateCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{id}/activation"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsActivateValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling subscriptionsActivate(Async)");
        }
        

        okhttp3.Call localVarCall = subscriptionsActivateCall(id, _callback);
        return localVarCall;

    }

    /**
     * Activate webhook subscription.
     * To ensure that target server is ready to consume notifications, we require you to implement the initial handshake.  Having subscription with &#x60;callbackUrl&#x60;: &#x60;https://example.org/hook&#x60;, during activation we will make &#x60;POST&#x60; request with &#x60;X-Hook-Secret&#x60; header:  &#x60;&#x60;&#x60; POST https://example.com/hook X-Hook-Secret: 4jn8fs9011jj8 &#x60;&#x60;&#x60;  We expect your server to respond within the time of 20 seconds with HTTP &#x60;200&#x60; response containing &#x60;X-Hook-Secret&#x60; header with same value.  &#x60;&#x60;&#x60; Response 200 X-Hook-Secret: 4jn8fs9011jj8 &#x60;&#x60;&#x60; 
     * @param id subscription identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Subscription activated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Subscription already activated. </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> Webhook activation handshake failed. </td><td>  -  </td></tr>
     </table>
     */
    public void subscriptionsActivate(String id) throws ApiException {
        subscriptionsActivateWithHttpInfo(id);
    }

    /**
     * Activate webhook subscription.
     * To ensure that target server is ready to consume notifications, we require you to implement the initial handshake.  Having subscription with &#x60;callbackUrl&#x60;: &#x60;https://example.org/hook&#x60;, during activation we will make &#x60;POST&#x60; request with &#x60;X-Hook-Secret&#x60; header:  &#x60;&#x60;&#x60; POST https://example.com/hook X-Hook-Secret: 4jn8fs9011jj8 &#x60;&#x60;&#x60;  We expect your server to respond within the time of 20 seconds with HTTP &#x60;200&#x60; response containing &#x60;X-Hook-Secret&#x60; header with same value.  &#x60;&#x60;&#x60; Response 200 X-Hook-Secret: 4jn8fs9011jj8 &#x60;&#x60;&#x60; 
     * @param id subscription identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Subscription activated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Subscription already activated. </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> Webhook activation handshake failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscriptionsActivateWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsActivateValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Activate webhook subscription. (asynchronously)
     * To ensure that target server is ready to consume notifications, we require you to implement the initial handshake.  Having subscription with &#x60;callbackUrl&#x60;: &#x60;https://example.org/hook&#x60;, during activation we will make &#x60;POST&#x60; request with &#x60;X-Hook-Secret&#x60; header:  &#x60;&#x60;&#x60; POST https://example.com/hook X-Hook-Secret: 4jn8fs9011jj8 &#x60;&#x60;&#x60;  We expect your server to respond within the time of 20 seconds with HTTP &#x60;200&#x60; response containing &#x60;X-Hook-Secret&#x60; header with same value.  &#x60;&#x60;&#x60; Response 200 X-Hook-Secret: 4jn8fs9011jj8 &#x60;&#x60;&#x60; 
     * @param id subscription identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Subscription activated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Subscription already activated. </td><td>  -  </td></tr>
        <tr><td> 424 </td><td> Webhook activation handshake failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsActivateAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsActivateValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsCreate
     * @param subscriptionRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Webhook subscription created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request query parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> With codes: * **NO_PERMISSION_TO_MANAGE_WEBHOOKS** when no permission to manage webhook subscriptions * **SUBSCRIPTIONS_LIMIT_EXCEEDED** when subscription limit for subscriber is exceeded  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Incorrect subscription data. Provided callback URL is invalid or event name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsCreateCall(SubscriptionRequest subscriptionRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = subscriptionRequest;

        // create path and map variables
        String localVarPath = "/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsCreateValidateBeforeCall(SubscriptionRequest subscriptionRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'subscriptionRequest' is set
        if (subscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'subscriptionRequest' when calling subscriptionsCreate(Async)");
        }
        

        okhttp3.Call localVarCall = subscriptionsCreateCall(subscriptionRequest, _callback);
        return localVarCall;

    }

    /**
     * Subscribe to a webhook.
     * Please be aware that before any event is delivered each subscription needs to be activated.  See [subscription activation](./#/subscriptions/subscriptions.activate).  We do limit number of subscriptions each subscriber can register. It means that:  * individual user can register up to 20 subscriptions * OAuth application can register up to 20 subscriptions on behalf of a single user 
     * @param subscriptionRequest  (required)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Webhook subscription created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request query parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> With codes: * **NO_PERMISSION_TO_MANAGE_WEBHOOKS** when no permission to manage webhook subscriptions * **SUBSCRIPTIONS_LIMIT_EXCEEDED** when subscription limit for subscriber is exceeded  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Incorrect subscription data. Provided callback URL is invalid or event name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public Subscription subscriptionsCreate(SubscriptionRequest subscriptionRequest) throws ApiException {
        ApiResponse<Subscription> localVarResp = subscriptionsCreateWithHttpInfo(subscriptionRequest);
        return localVarResp.getData();
    }

    /**
     * Subscribe to a webhook.
     * Please be aware that before any event is delivered each subscription needs to be activated.  See [subscription activation](./#/subscriptions/subscriptions.activate).  We do limit number of subscriptions each subscriber can register. It means that:  * individual user can register up to 20 subscriptions * OAuth application can register up to 20 subscriptions on behalf of a single user 
     * @param subscriptionRequest  (required)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Webhook subscription created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request query parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> With codes: * **NO_PERMISSION_TO_MANAGE_WEBHOOKS** when no permission to manage webhook subscriptions * **SUBSCRIPTIONS_LIMIT_EXCEEDED** when subscription limit for subscriber is exceeded  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Incorrect subscription data. Provided callback URL is invalid or event name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription> subscriptionsCreateWithHttpInfo(SubscriptionRequest subscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsCreateValidateBeforeCall(subscriptionRequest, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Subscribe to a webhook. (asynchronously)
     * Please be aware that before any event is delivered each subscription needs to be activated.  See [subscription activation](./#/subscriptions/subscriptions.activate).  We do limit number of subscriptions each subscriber can register. It means that:  * individual user can register up to 20 subscriptions * OAuth application can register up to 20 subscriptions on behalf of a single user 
     * @param subscriptionRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Webhook subscription created. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request query parameters. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> With codes: * **NO_PERMISSION_TO_MANAGE_WEBHOOKS** when no permission to manage webhook subscriptions * **SUBSCRIPTIONS_LIMIT_EXCEEDED** when subscription limit for subscriber is exceeded  </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Incorrect subscription data. Provided callback URL is invalid or event name is not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsCreateAsync(SubscriptionRequest subscriptionRequest, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsCreateValidateBeforeCall(subscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsDelete
     * @param id subscription identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Webhook subscription deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No permission to delete webhook subscription. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling subscriptionsDelete(Async)");
        }
        

        okhttp3.Call localVarCall = subscriptionsDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete webhook subscription.
     * 
     * @param id subscription identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Webhook subscription deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No permission to delete webhook subscription. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public void subscriptionsDelete(String id) throws ApiException {
        subscriptionsDeleteWithHttpInfo(id);
    }

    /**
     * Delete webhook subscription.
     * 
     * @param id subscription identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Webhook subscription deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No permission to delete webhook subscription. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> subscriptionsDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete webhook subscription. (asynchronously)
     * 
     * @param id subscription identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Webhook subscription deleted. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No permission to delete webhook subscription. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsGet
     * @param id subscription identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No permission to see this subscription. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsGetCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling subscriptionsGet(Async)");
        }
        

        okhttp3.Call localVarCall = subscriptionsGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Retrieve single webhook subscription.
     * 
     * @param id subscription identifier (required)
     * @return Subscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No permission to see this subscription. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public Subscription subscriptionsGet(String id) throws ApiException {
        ApiResponse<Subscription> localVarResp = subscriptionsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Retrieve single webhook subscription.
     * 
     * @param id subscription identifier (required)
     * @return ApiResponse&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No permission to see this subscription. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Subscription> subscriptionsGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve single webhook subscription. (asynchronously)
     * 
     * @param id subscription identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Subscription details. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> No permission to see this subscription. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Subscription not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsGetAsync(String id, final ApiCallback<Subscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Subscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for subscriptionsGetAll
     * @param pageId identifier of the next page of subscriptions (optional)
     * @param limit number of elements to return (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of subscription details. </td><td>  * Link - Link to next resources is provided in the Link header according to [RFC8288](https://tools.ietf.org/html/rfc8288). The relation type is \&quot;next\&quot;. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsGetAllCall(String pageId, Integer limit, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (pageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page_id", pageId));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "key", "oauth" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call subscriptionsGetAllValidateBeforeCall(String pageId, Integer limit, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = subscriptionsGetAllCall(pageId, limit, _callback);
        return localVarCall;

    }

    /**
     * Retrieve webhook subscriptions.
     * 
     * @param pageId identifier of the next page of subscriptions (optional)
     * @param limit number of elements to return (optional, default to 10)
     * @return List&lt;Subscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of subscription details. </td><td>  * Link - Link to next resources is provided in the Link header according to [RFC8288](https://tools.ietf.org/html/rfc8288). The relation type is \&quot;next\&quot;. <br>  </td></tr>
     </table>
     */
    public List<Subscription> subscriptionsGetAll(String pageId, Integer limit) throws ApiException {
        ApiResponse<List<Subscription>> localVarResp = subscriptionsGetAllWithHttpInfo(pageId, limit);
        return localVarResp.getData();
    }

    /**
     * Retrieve webhook subscriptions.
     * 
     * @param pageId identifier of the next page of subscriptions (optional)
     * @param limit number of elements to return (optional, default to 10)
     * @return ApiResponse&lt;List&lt;Subscription&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of subscription details. </td><td>  * Link - Link to next resources is provided in the Link header according to [RFC8288](https://tools.ietf.org/html/rfc8288). The relation type is \&quot;next\&quot;. <br>  </td></tr>
     </table>
     */
    public ApiResponse<List<Subscription>> subscriptionsGetAllWithHttpInfo(String pageId, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = subscriptionsGetAllValidateBeforeCall(pageId, limit, null);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve webhook subscriptions. (asynchronously)
     * 
     * @param pageId identifier of the next page of subscriptions (optional)
     * @param limit number of elements to return (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of subscription details. </td><td>  * Link - Link to next resources is provided in the Link header according to [RFC8288](https://tools.ietf.org/html/rfc8288). The relation type is \&quot;next\&quot;. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call subscriptionsGetAllAsync(String pageId, Integer limit, final ApiCallback<List<Subscription>> _callback) throws ApiException {

        okhttp3.Call localVarCall = subscriptionsGetAllValidateBeforeCall(pageId, limit, _callback);
        Type localVarReturnType = new TypeToken<List<Subscription>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
